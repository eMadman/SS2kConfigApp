name: Build and Release Applications

on:
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  STRAVA_CLIENT_ID: ${{ secrets.STRAVA_CLIENT_ID }}
  STRAVA_CLIENT_SECRET: ${{ secrets.STRAVA_CLIENT_SECRET }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          VERSION=$(grep 'version: ' pubspec.yaml | sed 's/version: //')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          
      - name: Check if tag exists
        id: check_tag
        run: |
          TAG_EXISTS=$(git tag -l "$VERSION")
          if [[ "$TAG_EXISTS" == "$VERSION" ]]; then
            SUFFIX=1
            NEW_TAG="$VERSION-$SUFFIX"
            while [[ $(git tag -l "$NEW_TAG") == "$NEW_TAG" ]]; do
              SUFFIX=$((SUFFIX+1))
              NEW_TAG="$VERSION-$SUFFIX"
            done
            echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          else
            echo "NEW_TAG=$VERSION" >> $GITHUB_ENV
          fi
          
      - name: Set output
        id: set_version
        run: echo "::set-output name=version::$NEW_TAG"

  build-macos:
    needs: prepare
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.22.3'

      # Debug environment variables
      - name: Debug Environment Variables
        run: |
          echo "Checking environment variables (secrets will be masked):"
          env | grep -i STRAVA || true
          
      - name: Create env.local.dart
        run: |
          mkdir -p lib/config
          umask 077
          cat > lib/config/env.local.dart << EOL
          class Environment {
            static const String stravaClientId = '${{ secrets.STRAVA_CLIENT_ID }}';
            static const String stravaClientSecret = '${{ secrets.STRAVA_CLIENT_SECRET }}';
            
            static bool get hasStravaConfig =>
              stravaClientId.isNotEmpty && stravaClientSecret.isNotEmpty;
          }
          EOL
          
          # Verify file exists but don't show contents
          ls -l lib/config/env.local.dart

      - name: Build Android APK
        run: flutter build apk --no-tree-shake-icons

      - name: Rename APK to ss2kconfigapp.apk
        run: mv build/app/outputs/flutter-apk/app-release.apk build/ss2kconfigapp.apk

      - name: Build iOS App
        run: flutter build ios --release --no-codesign --no-tree-shake-icons

      - name: Build macOS App
        run: flutter build macos --release --no-tree-shake-icons

      - name: Create artifacts
        run: |
          mkdir -p artifacts
          zip -r artifacts/ss2kconfigapp${{ needs.prepare.outputs.version }}.zip build/ss2kconfigapp.apk build/ios/iphoneos build/macos/Build/Products/Release

      # Clean up sensitive files
      - name: Clean up env.local.dart
        if: always()
        run: |
          if [ -f lib/config/env.local.dart ]; then
            rm lib/config/env.local.dart
            echo "Cleaned up env.local.dart"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: artifacts/

  build-linux:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.22.3'

      - name: Create env.local.dart
        run: |
          mkdir -p lib/config
          umask 077
          cat > lib/config/env.local.dart << EOL
          class Environment {
            static const String stravaClientId = '${{ secrets.STRAVA_CLIENT_ID }}';
            static const String stravaClientSecret = '${{ secrets.STRAVA_CLIENT_SECRET }}';
            
            static bool get hasStravaConfig =>
              stravaClientId.isNotEmpty && stravaClientSecret.isNotEmpty;
          }
          EOL

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev liblzma-dev libsecret-1-dev libjsoncpp-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Build Linux App
        run: |
          flutter config --enable-linux-desktop
          flutter build linux --release --no-tree-shake-icons
          
      - name: Create AppImage
        run: |
          # Install appimagetool
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          
          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy application files
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
          cp assets/icons/ss2kv3.png AppDir/usr/share/icons/hicolor/256x256/apps/ss2kconfigapp.png
          
          # Create desktop file
          cat > AppDir/usr/share/applications/ss2kconfigapp.desktop << EOL
          [Desktop Entry]
          Name=SmartSpin2k Config App
          Exec=ss2kconfigapp
          Icon=ss2kconfigapp
          Type=Application
          Categories=Utility;
          EOL
          
          # Create AppImage
          ./appimagetool AppDir ss2kconfigapp.AppImage

      - name: Create artifacts
        run: |
          mkdir -p artifacts
          mv ss2kconfigapp.AppImage artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: artifacts/

  create-release:
    needs: [prepare, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Prepare release bundle
        run: |
          mkdir -p release
          cp all-artifacts/macos-artifacts/ss2kconfigapp${{ needs.prepare.outputs.version }}.zip release/
          cp all-artifacts/linux-artifacts/ss2kconfigapp.AppImage release/ss2kconfigapp-${{ needs.prepare.outputs.version }}.AppImage

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          name: SmartSpin2kConfigApp ${{ needs.prepare.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: ${{ github.event.head_commit.message }}
          files: |
            release/ss2kconfigapp${{ needs.prepare.outputs.version }}.zip
            release/ss2kconfigapp-${{ needs.prepare.outputs.version }}.AppImage
